const mongoose = require('mongoose');
const User = require('./models/user.model');

// Script de debug pour v√©rifier le statut d'un utilisateur
async function debugUserStatus(userEmail) {
  try {
    console.log('üîç Debug du statut utilisateur...\n');

    // Connexion √† la base de donn√©es
    await mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost:27017/techopportunites');
    console.log('‚úÖ Connexion √† la base de donn√©es r√©ussie\n');

    // Rechercher l'utilisateur par email
    const user = await User.findOne({ email: userEmail }).select('nom prenom email role validationStatus dateCreation');
    
    if (!user) {
      console.log(`‚ùå Utilisateur avec l'email "${userEmail}" non trouv√©`);
      return;
    }

    console.log('üë§ Informations utilisateur:');
    console.log(`   Nom: ${user.nom} ${user.prenom}`);
    console.log(`   Email: ${user.email}`);
    console.log(`   R√¥le: ${user.role}`);
    console.log(`   Statut de validation: ${user.validationStatus}`);
    console.log(`   Date de cr√©ation: ${user.dateCreation}`);

    // V√©rifier les permissions
    console.log('\nüîê Permissions:');
    console.log(`   Peut publier des offres: ${user.role === 'recruteur' && user.validationStatus === 'approved' ? '‚úÖ OUI' : '‚ùå NON'}`);
    console.log(`   Peut acc√©der au tableau de bord recruteur: ${user.role === 'recruteur' && user.validationStatus === 'approved' ? '‚úÖ OUI' : '‚ùå NON'}`);

    // Si c'est un recruteur, v√©rifier les offres
    if (user.role === 'recruteur') {
      const Offer = require('./models/offer.model');
      const offers = await Offer.find({ source: user._id }).select('titre statut date');
      
      console.log(`\nüìã Offres publi√©es: ${offers.length}`);
      offers.forEach((offer, index) => {
        console.log(`   ${index + 1}. ${offer.titre} (${offer.statut}) - ${offer.date}`);
      });
    }

    // V√©rifier les notifications
    const Notification = require('./models/notification.model');
    const notifications = await Notification.find({ userId: user._id }).select('title message type createdAt').sort({ createdAt: -1 }).limit(5);
    
    console.log(`\nüîî Derni√®res notifications: ${notifications.length}`);
    notifications.forEach((notif, index) => {
      console.log(`   ${index + 1}. [${notif.type}] ${notif.title} - ${notif.createdAt}`);
    });

  } catch (error) {
    console.error('‚ùå Erreur lors du debug:', error);
  } finally {
    await mongoose.disconnect();
    console.log('\n‚úÖ D√©connexion de la base de donn√©es');
  }
}

// Ex√©cuter le script si appel√© directement
if (require.main === module) {
  const userEmail = process.argv[2];
  if (!userEmail) {
    console.log('Usage: node debug-user-status.js <email>');
    process.exit(1);
  }
  debugUserStatus(userEmail);
}

module.exports = debugUserStatus;
