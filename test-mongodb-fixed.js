const mongoose = require('mongoose');
const path = require('path');

// Charger les variables d'environnement depuis config/.env
require('dotenv').config({ path: path.join(__dirname, 'config', '.env') });

async function testMongoDBWithDifferentOptions() {
  console.log('üîç Test MongoDB Atlas avec diff√©rentes options...');
  console.log('üìç IP dans whitelist: 10.158.253.94 ‚úÖ');
  
  if (!process.env.MONGO) {
    console.log('‚ùå Variable MONGO non trouv√©e');
    return false;
  }
  
  console.log('üîó URI MongoDB:', process.env.MONGO.replace(/\/\/.*@/, '//***:***@'));
  
  // Options de connexion optimis√©es
  const connectionOptions = [
    {
      name: 'Options par d√©faut',
      options: {
        serverSelectionTimeoutMS: 30000,
        connectTimeoutMS: 30000,
        socketTimeoutMS: 30000
      }
    },
    {
      name: 'Options avec retry',
      options: {
        serverSelectionTimeoutMS: 30000,
        connectTimeoutMS: 30000,
        socketTimeoutMS: 30000,
        retryWrites: true,
        retryReads: true,
        maxPoolSize: 10,
        minPoolSize: 5
      }
    },
    {
      name: 'Options avec compression',
      options: {
        serverSelectionTimeoutMS: 30000,
        connectTimeoutMS: 30000,
        socketTimeoutMS: 30000,
        compressors: ['zlib'],
        zlibCompressionLevel: 6
      }
    }
  ];
  
  for (const config of connectionOptions) {
    try {
      console.log(`\nüîÑ Test avec: ${config.name}`);
      console.log('‚è±Ô∏è Timeout: 30 secondes');
      
      await mongoose.connect(process.env.MONGO, config.options);
      
      console.log('‚úÖ Connexion r√©ussie !');
      console.log('üìä √âtat de la connexion:', mongoose.connection.readyState);
      console.log('üè∑Ô∏è Nom de la base:', mongoose.connection.name);
      console.log('üåê Host:', mongoose.connection.host);
      console.log('üîå Port:', mongoose.connection.port);
      
      // Test d'une requ√™te simple
      const User = require('./models/user.model');
      const userCount = await User.countDocuments();
      console.log('üë• Nombre d\'utilisateurs:', userCount);
      
      // Test d'insertion
      console.log('üìù Test d\'insertion...');
      const testUser = new User({
        nom: 'Test',
        prenom: 'User',
        email: `test${Date.now()}@example.com`,
        password: 'hashedpassword',
        role: 'candidate'
      });
      
      const savedUser = await testUser.save();
      console.log('‚úÖ Utilisateur ins√©r√©:', savedUser._id);
      
      // Nettoyer
      await User.findByIdAndDelete(savedUser._id);
      console.log('üßπ Utilisateur de test supprim√©');
      
      await mongoose.disconnect();
      console.log('üîå Connexion ferm√©e');
      
      return true;
      
    } catch (error) {
      console.log(`‚ùå √âchec avec ${config.name}:`, {
        message: error.message,
        code: error.code,
        name: error.name
      });
      
      // Fermer la connexion si elle existe
      if (mongoose.connection.readyState !== 0) {
        await mongoose.disconnect();
      }
    }
  }
  
  return false;
}

async function testWithDifferentURI() {
  console.log('\nüîÑ Test avec URI modifi√©e...');
  
  // Essayer avec des param√®tres d'URI diff√©rents
  const baseURI = process.env.MONGO;
  const modifiedURIs = [
    baseURI,
    baseURI + '&serverSelectionTimeoutMS=30000',
    baseURI + '&connectTimeoutMS=30000',
    baseURI + '&socketTimeoutMS=30000',
    baseURI.replace('?', '?retryWrites=true&w=majority&')
  ];
  
  for (let i = 0; i < modifiedURIs.length; i++) {
    const uri = modifiedURIs[i];
    try {
      console.log(`\nüîÑ Test URI ${i + 1}/${modifiedURIs.length}`);
      console.log('üîó URI:', uri.replace(/\/\/.*@/, '//***:***@'));
      
      await mongoose.connect(uri, {
        serverSelectionTimeoutMS: 30000,
        connectTimeoutMS: 30000,
        socketTimeoutMS: 30000
      });
      
      console.log('‚úÖ Connexion r√©ussie avec URI modifi√©e !');
      console.log('üìä √âtat:', mongoose.connection.readyState);
      
      await mongoose.disconnect();
      return true;
      
    } catch (error) {
      console.log(`‚ùå √âchec URI ${i + 1}: ${error.message}`);
      
      if (mongoose.connection.readyState !== 0) {
        await mongoose.disconnect();
      }
    }
  }
  
  return false;
}

async function main() {
  console.log('üöÄ Test MongoDB Atlas avec IP whitelist√©e...\n');
  
  // Test 1: Options diff√©rentes
  const success1 = await testMongoDBWithDifferentOptions();
  
  if (!success1) {
    // Test 2: URI modifi√©es
    const success2 = await testWithDifferentURI();
    
    if (!success2) {
      console.log('\n‚ùå Tous les tests ont √©chou√©');
      console.log('\nüí° DIAGNOSTIC:');
      console.log('üîí IP dans whitelist: ‚úÖ');
      console.log('üåê Probl√®me possible:');
      console.log('1. Firewall/antivirus bloque la connexion');
      console.log('2. Probl√®me DNS (essayez 8.8.8.8 comme DNS)');
      console.log('3. Proxy/VPN interf√®re');
      console.log('4. MongoDB Atlas en maintenance');
      
      console.log('\nüîß SOLUTIONS:');
      console.log('1. D√©sactivez temporairement l\'antivirus/firewall');
      console.log('2. Changez votre DNS vers 8.8.8.8');
      console.log('3. D√©sactivez le VPN si vous en utilisez un');
      console.log('4. Essayez depuis un autre r√©seau (mobile hotspot)');
    }
  } else {
    console.log('\nüéâ MongoDB Atlas fonctionne parfaitement !');
    console.log('‚úÖ Vous pouvez maintenant utiliser l\'inscription et la connexion');
  }
}

main();


